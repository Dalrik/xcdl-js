// DO NOT EDIT! Automatically generated!
// Support code for {{ deviceName }}.

{% for peripheral in peripherals %}{% assign periphName = peripheral.name %}{% if peripheral.qemuGroupName %}{% assign periphName = peripheral.qemuGroupName %}{% endif %}{% if peripheral.registers %}
// File: {{ vendorPrefix | downcase }}/{{ periphName | downcase }}.h
// ----- 8< ----- 8< -----  8< ----- 8< ----- 8< ----- 8< ----- 8< -----

/*
 * {{ vendorPrefix }} - {{ periphName }} emulation.
 *
 * Copyright (c) 2016 Liviu Ionescu.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, see <http://www.gnu.org/licenses/>.
 */

#ifndef {{ vendorPrefix }}_{{ periphName }}_H_
#define {{ vendorPrefix }}_{{ periphName }}_H_

#include "qemu/osdep.h"

#include <hw/cortexm/peripheral.h>
#include <hw/cortexm/{{ vendorPrefix | downcase }}/capabilities.h>

// ----------------------------------------------------------------------------

#define DEVICE_PATH_{{ vendorPrefix }}_{{ periphName }} DEVICE_PATH_{{ vendorPrefix }} "{{ periphName }}"

// ----------------------------------------------------------------------------

// Note: the "port-index" property has type "int".
typedef enum {
    {{ vendorPrefix }}_{{ periphName }}_PORT_1 = 0,
    // TODO add all other peripherals in this group
    {{ vendorPrefix }}_{{ periphName }}_PORT_UNDEFINED = 0xFF,
} {{ vendorPrefix | downcase }}_{{ periphName | downcase }}_index_t;

// ----------------------------------------------------------------------------

#define TYPE_{{ vendorPrefix }}_{{ periphName }} TYPE_{{ vendorPrefix }}_PREFIX "{{ periphName | downcase }}" TYPE_PERIPHERAL_SUFFIX

// ----------------------------------------------------------------------------

// Parent definitions.
#define TYPE_{{ vendorPrefix }}_{{ periphName }}_PARENT TYPE_PERIPHERAL
typedef PeripheralClass {{ vendorPrefix }}{{ periphName }}ParentClass;
typedef PeripheralState {{ vendorPrefix }}{{ periphName }}ParentState;

// ----------------------------------------------------------------------------

// Class definitions.
#define {{ vendorPrefix }}_{{ periphName }}_GET_CLASS(obj) \
    OBJECT_GET_CLASS({{ vendorPrefix }}{{ periphName }}Class, (obj), TYPE_{{ vendorPrefix }}_{{ periphName }})
#define {{ vendorPrefix }}_{{ periphName }}_CLASS(klass) \
    OBJECT_CLASS_CHECK({{ vendorPrefix }}{{ periphName }}Class, (klass), TYPE_{{ vendorPrefix }}_{{ periphName }})

typedef struct {
    // private: 
    {{ vendorPrefix }}{{ periphName }}ParentClass parent_class;
    // public: 

    // None, so far.
} {{ vendorPrefix }}{{ periphName }}Class;

// ----------------------------------------------------------------------------

// Instance definitions.
#define {{ vendorPrefix }}_{{ periphName }}_STATE(obj) \
    OBJECT_CHECK({{ vendorPrefix }}{{ periphName }}State, (obj), TYPE_{{ vendorPrefix }}_{{ periphName }})

typedef struct {
    // private:
    {{ vendorPrefix }}{{ periphName }}ParentState parent_obj;
    // public:

    const {{ vendorPrefix }}Capabilities *capabilities;

    MemoryRegion mmio;

    // Points to the bitfield that enables the peripheral.
    Object *enabling_bit;
{% if peripheral.qemuGroupName %}
    // Remove it if there is only one port
    {{ vendorPrefix | downcase }}_{{ periphName | downcase }}_index_t port_index;
{% endif %}
    union {
      // ----- 8< ----- 8< -----  8< ----- 8< ----- 8< ----- 8< ----- 8< -----

      // DO NOT REMOVE FIELDS! Automatically generated!
      // Merge fields from different family members.
      struct {
        // {{ deviceFamily }} {{ periphName }} ({{ peripheral.description }}) registers.
        struct { {% for register in peripheral.registers %}
          Object *{{ register.name | downcase }}; // {{ register.addressOffset}} ({{ register.description }}) {% endfor %}
        } reg;

        struct { {% for register in peripheral.registers %}
          
          // {{ register.name }} ({{ register.description }}) bitfields.
          struct { {% if register.fields %}{% for field in register.fields %}
            Object *{{ field.name | downcase }}; // [{{ field.bitOffset }}:{% bitTo field %}] {{ field.description }} {% endfor %} {% endif %}
          } {{ register.name | downcase }}; {% endfor %}
        } fld;
      } {{ deviceFamily | downcase }};

      // ----- 8< ----- 8< -----  8< ----- 8< ----- 8< ----- 8< ----- 8< -----
    } u;

} {{ vendorPrefix }}{{ periphName }}State;

// ----------------------------------------------------------------------------

#endif /* {{ vendorPrefix }}_{{ periphName }}_H_ */

// File: {{ vendorPrefix | downcase }}/{{ periphName | downcase }}.c
// ----- 8< ----- 8< -----  8< ----- 8< ----- 8< ----- 8< ----- 8< -----

/*
 * {{ vendorPrefix }} - {{ periphName }} emulation.
 *
 * Copyright (c) 2016 Liviu Ionescu.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, see <http://www.gnu.org/licenses/>.
 */

#include <hw/cortexm/{{ vendorPrefix | downcase }}/{{ periphName | downcase }}.h>
#include <hw/cortexm/{{ vendorPrefix | downcase }}/mcu.h>
#include <hw/cortexm/helper.h>
#include <hw/cortexm/svd.h>

// ----- Generated code -------------------------------------------------------
//
// ----- 8< ----- 8< -----  8< ----- 8< ----- 8< ----- 8< ----- 8< -----

// DO NOT EDIT! Automatically generated!
static void {{ deviceName | downcase }}_{{ periphName | downcase }}_create_objects(Object *obj, JSON_Object *svd, const char *name)
{
    {{ vendorPrefix }}{{ periphName }}State *state = {{ vendorPrefix }}_{{ periphName }}_STATE(obj);

    JSON_Object *periph = svd_get_peripheral_by_name(svd, name);
    svd_add_peripheral_properties_and_children(obj, periph, svd);

    // Registers. {% for register in peripheral.registers %}
    state->u.{{ deviceFamily | downcase }}.reg.{{ register.name | downcase }} = cm_object_get_child_by_name(obj, "{{ register.name }}");{% endfor %}
    {% for register in peripheral.registers %}
    
    // {{ register.name }} bitfields.{% for field in register.fields %}
    state->u.{{ deviceFamily | downcase }}.fld.{{ register.name | downcase}}.{{ field.name | downcase }} = cm_object_get_child_by_name(state->u.{{ deviceFamily | downcase }}.reg.{{ register.name | downcase }}, "{{ field.name }}"); {% endfor %} {% endfor %}
}

// ----- 8< ----- 8< -----  8< ----- 8< ----- 8< ----- 8< ----- 8< -----

// ----- Private --------------------------------------------------------------

#if 0
static peripheral_register_t {{ vendorPrefix | downcase }}_{{ periphName | downcase }}_xxx_pre_write_callback(Object *reg,
        Object *periph, uint32_t addr, uint32_t offset, unsigned size,
        peripheral_register_t value, peripheral_register_t full_value)
{
    {{ vendorPrefix }}{{ periphName }}State *state = {{ vendorPrefix }}_{{ periphName }}_STATE(periph);

    peripheral_register_t prev_value = peripheral_register_get_raw_prev_value(reg);

    // TODO: Add code to adjust the value (like applying some masks,
    // for example prevent setting interrupts not enabled).
    // Also process cleared/set by write 1/0 bits.
    // The returned value will be stored in the register value.

    return full_value;
}

static void {{ vendorPrefix | downcase }}_{{ periphName | downcase }}_xxx_post_write_callback(Object *reg, Object *periph,
        uint32_t addr, uint32_t offset, unsigned size,
        peripheral_register_t value, peripheral_register_t full_value)
{
    {{ vendorPrefix }}{{ periphName }}State *state = {{ vendorPrefix }}_{{ periphName }}_STATE(periph);

    peripheral_register_t prev_value = peripheral_register_get_raw_prev_value(reg);
    // The new register value is full_value, the old one is prev_value.

    // TODO: Add code to send the value to the consumer.
}

static peripheral_register_t {{ vendorPrefix | downcase }}_{{ periphName | downcase }}_xxx_pre_read_callback(Object *reg,
        Object *periph, uint32_t addr, uint32_t offset, unsigned size)
{
    {{ vendorPrefix }}{{ periphName }}State *state = {{ vendorPrefix }}_{{ periphName }}_STATE(periph);

    peripheral_register_t value = 0;

    // Add code to get the value from the producer, and return it.

    // This value, possibly masked, will be stored in the register
    // and returned when the register is read.
    return value;
}

static void {{ vendorPrefix | downcase }}_{{ periphName | downcase }}_xxx_post_read_callback(Object *reg, Object *periph,
        uint32_t addr, uint32_t offset, unsigned size)
{
    {{ vendorPrefix }}{{ periphName }}State *state = {{ vendorPrefix }}_{{ periphName }}_STATE(periph);

    peripheral_register_t value = peripheral_register_get_raw_value(reg);

    // TODO: add code to perform the post read actions, like clearing some bits.
}
#endif

// ----------------------------------------------------------------------------

static void {{ vendorPrefix | downcase }}_{{ periphName | downcase }}_instance_init_callback(Object *obj)
{
    qemu_log_function_name();

    {{ vendorPrefix }}{{ periphName }}State *state = {{ vendorPrefix }}_{{ periphName }}_STATE(obj);

    // Capabilities are not yet available.
{% if peripheral.qemuGroupName %}
    cm_object_property_add_int(obj, "port-index",
            (const int *) &state->port_index);
    state->port_index = {{ vendorPrefix }}_{{ periphName }}_PORT_UNDEFINED;
{% endif %}
    state->enabling_bit = NULL;
    // TODO: Add code to initialise all members.
}

static void {{ vendorPrefix | downcase }}_{{ periphName | downcase }}_realize_callback(DeviceState *dev, Error **errp)
{
    qemu_log_function_name();

    // Parent realize() is called at the end, after setting properties 
    // and creating registers.

    {{ vendorPrefix }}MCUState *mcu = {{ vendorPrefix | downcase }}_mcu_get();
    CortexMState *cm_state = CORTEXM_MCU_STATE(mcu);

    {{ vendorPrefix }}{{ periphName }}State *state = {{ vendorPrefix }}_{{ periphName }}_STATE(dev);
    // First thing first: get capabilities from MCU, needed everywhere.
    state->capabilities = mcu->capabilities;

    // Also keep a local pointer, to access them easier.
    const {{ vendorPrefix }}Capabilities *capabilities = state->capabilities;
    assert(capabilities != NULL);

    Object *obj = OBJECT(dev);

    const char *periph_name = "{{ periphName }}";

    char enabling_bit_name[{{ vendorPrefix }}_RCC_SIZEOF_ENABLING_BITFIELD];

    switch (capabilities->family) {
    case {{ vendorPrefix }}_FAMILY_{{ deviceFamily }}:

        if (capabilities->{{ deviceFamily | downcase }}.is_{{ deviceSelector }} ) {

            {{ deviceName | downcase }}_{{ periphName | downcase }}_create_objects(obj, cm_state->svd_json, periph_name);

            // TODO: add actions.
            // cm_object_property_set_str(state->u.{{ deviceFamily | downcase }}.fld.xxx.fff, "GGG", "follows");
            // cm_object_property_set_str(state->u.{{ deviceFamily | downcase }}.fld.xxx.fff, "GGG", "cleared-by");

            // TODO: add callbacks.
            // peripheral_register_set_pre_read(state->{{ deviceFamily | downcase }}.reg.xxx, &{{ vendorPrefix | downcase }}_{{ periphName | downcase }}_xxx_pre_read_callback);
            // peripheral_register_set_post_read(state->{{ deviceFamily | downcase }}.reg.xxx, &{{ vendorPrefix | downcase }}_{{ periphName | downcase }}_xxx_post_read_callback);
            // peripheral_register_set_pre_read(state->{{ deviceFamily | downcase }}.reg.xxx, &{{ vendorPrefix | downcase }}_{{ periphName | downcase }}_xxx_pret_read_callback);
            // peripheral_register_set_post_write(state->{{ deviceFamily | downcase }}.reg.xxx, &{{ vendorPrefix | downcase }}_{{ periphName | downcase }}_xxx_post_write_callback);

            // TODO: add interrupts.
{% if peripheral.qemuGroupName %}
            snprintf(enabling_bit_name, sizeof(enabling_bit_name) - 1,
                DEVICE_PATH_{{ vendorPrefix }}_RCC "/AHB1ENR/{{ periphName }}%dEN",
                state->port_index - {{ vendorPrefix }}_{{ periphName }}_PORT_A + 1);
{% else %}
            snprintf(enabling_bit_name, sizeof(enabling_bit_name) - 1,
                DEVICE_PATH_{{ vendorPrefix }}_RCC "/AHB1ENR/{{ periphName }}EN");
{% endif %}

        } else {
            assert(false);
        }

        break;

    default:
        assert(false);
        break;
    }

    state->enabling_bit = OBJECT(cm_device_by_name(enabling_bit_name));

    svd_set_peripheral_address_block(cm_state->svd_json, periph_name, obj);

    // Call parent realize().
    if (!cm_device_parent_realize(dev, errp, TYPE_{{ vendorPrefix }}_{{ periphName }})) {
        return;
    }
}

static void {{ vendorPrefix | downcase }}_{{ periphName | downcase }}_reset_callback(DeviceState *dev)
{
    qemu_log_function_name();

    // Call parent reset(); this will reset all children registers.
    cm_device_parent_reset(dev, TYPE_{{ vendorPrefix }}_{{ periphName }});
}

static void {{ vendorPrefix | downcase }}_{{ periphName | downcase }}_class_init_callback(ObjectClass *klass, void *data)
{
    DeviceClass *dc = DEVICE_CLASS(klass);

    dc->reset = {{ vendorPrefix | downcase }}_{{ periphName | downcase }}_reset_callback;
    dc->realize = {{ vendorPrefix | downcase }}_{{ periphName | downcase }}_realize_callback;
}

static const TypeInfo {{ vendorPrefix | downcase }}_{{ periphName | downcase }}_type_info = {
    .name = TYPE_{{ vendorPrefix }}_{{ periphName }},
    .parent = TYPE_{{ vendorPrefix }}_{{ periphName }}_PARENT,
    .instance_init = {{ vendorPrefix | downcase }}_{{ periphName | downcase }}_instance_init_callback,
    .instance_size = sizeof({{ vendorPrefix }}{{ periphName }}State),
    .class_init = {{ vendorPrefix | downcase }}_{{ periphName | downcase }}_class_init_callback,
    .class_size = sizeof({{ vendorPrefix }}{{ periphName }}Class) };

static void {{ vendorPrefix | downcase }}_{{ periphName | downcase }}_register_types(void)
{
    type_register_static(&{{ vendorPrefix | downcase }}_{{ periphName | downcase }}_type_info);
}

type_init({{ vendorPrefix | downcase }}_{{ periphName | downcase }}_register_types);

// ----------------------------------------------------------------------------

// ----- 8< ----- 8< -----  8< ----- 8< ----- 8< ----- 8< ----- 8< -----

{% endif %}{% endfor %}